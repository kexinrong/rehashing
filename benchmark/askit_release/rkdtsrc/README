
BUIDLING THE LIBRARIES
1) MPI:  make sure mpicc and mpic++ are in the path
2) edit "sourceme" file to set to  KNN_DIR, MPICC, MPICXX then ,
3) source sourceme
4) edit makefile.inc, first three lines only to setup flags and BLAS paths. 
5) make all

--- USAGE: ----

** Using the code from the command line with an existing file containing the points: 
cd $KNN_DIR/parallelIO
  test_find_knn.exe  
is the main search routine. 
Use "test_find_knn.exe -h" for options

To generate data to test it:
Generate a dataset of points using uniform / normal distribution in d dimensions use test_generate_data.exe
./test_generate_data.exe -h for command line options
E.g. generate 10000 poins in 3d. 
mpirun -np 1 ./test_generate_data.exe -file exN10000.d3 -nref 10000 -d 3 -id 3 -gen 1 -binary
The INPUT FORMAT is x1(1),...,x1(d), x2(1),....,x2(d)..
if you don't specify -binary, the output is in ASCII. Use small nref to see what the output is. 
mpirun -np 1 ./test_generate_data.exe -file exN40.d10 -nref 40 -d 10  -gen 1 

To find the neighbors for the  exN10000.d3 dataset we just created
- Using 1 MPI process for 2 nearest neighbors, find k=2 neighbors for all points in the dataset 
mpirun -np 1 ./test_find_knn.exe  -ref_file exN10000.d3 -search_all2all -glb_nref 10000 -eval -dim 3 -k 2  -binary
- writing  the results in exN10000.d3.knn
mpirun -np 1 ./test_find_knn.exe  -ref_file exN10000.d3 -search_all2all -glb_nref 10000 -eval -dim 3 -k 2  -binary -knn_file exN10000.d3.knn
- using 2 MPI processes to store the results in exN10000.d3.knn
mpirun -np 2 ./test_find_knn.exe  -ref_file exN10000.d3 -search_all2all -glb_nref 10000 -eval -dim 3 -k 2  -knn_file exN10000.d3.knn


The OUTPUT FORMAT of the knn file is 
target_index  distance_to_first_neighbor first_neighbor_index  distance_to_second_neighbor second_neighbor_index
Example using ASCII
mpirun -np 1 ./test_generate_data.exe -file exN40.d10 -nref 40 -d 10  -gen 1 
mpirun -np 2 ./test_find_knn.exe  -ref_file exN40.d10 -search_all2all -glb_nref 40 -eval -dim 10 -k 2  -knn_file exN40.d10.knn


the [-eval] command gives an estimate of the error (computed by sampling). If you want to increase the accuracy increase the points per box [ -mppn points]  and the randomized tree iterations [-iter iter_num].
Example
mpirun -np 1 ./test_generate_data.exe -file exN40000.d10 -nref 40000 -d 10  -gen 1 -binary
mpirun -np 2 ./test_find_knn.exe  -ref_file exN40000.d10 -search_all2all -glb_nref 40000 -eval -dim 10 -k 4  -knn_file exN40000.d10.knn.k4 -binary
mpirun -np 2 ./test_find_knn.exe  -ref_file exN40000.d10 -search_all2all -glb_nref 40000 -eval -dim 10 -k 4  -knn_file exN40000.d10.knn.k4 -mppn 1000 -iter 10 -binary

Finally if you want different sources and targets:
mpirun -np 1 ./test_generate_data.exe -file exN40000.d10 -nref 40000 -d 10  -gen 1 -binary
mpirun -np 1 ./test_generate_data.exe -file exN20000.d10.trg -nref 20000 -d 10  -gen 1 -binary
mpirun -np 2 ./test_find_knn.exe  -query_file exN20000.d10.trg -glb_nquery 20000 -ref_file exN40000.d10 -glb_nref 40000 -eval -dim 10 -k 4  -knn_file exN40000.d10.knn.k4 -mppn 1000 -iter 10 -binary


** Using the code as a library from a C++ application:
The main directory for nearest neighbor searches in binTree
ex1a2a.exe shows an example of an all-to-all search


--- additional notes for test_find_knn.exe
in test_find_knn.exe : if the input file is binary you need to specify -binary and the output will also be binary.
* the more nearest neighbors you request the more iterations you need to get good accuracy
* for guaussian distribution of points in high dimensions, you need and excpetionally large number of iterations, equivallent to a direct evaluation; try to create a smaller dataset and 
check how many iterations you need for certain accuracy. 
*  if the sources and targets are the same files, then you need to specify -search_all2all and the first neighbor will always be the target itself. 

--- other functinality
The src directory has several other capabilities: locality sensitive hasing, exhaustive evaluation (parallel and sequential), different tree types, 
shared memory versions only. But these are not used as much. The test_find_knn() is being used extensively and it is quite robust.

--------
Module system and MKL:
Check if your system has package managing using the "module" software. 
Most high-end computing centers use it. 
If you have it, the typical setup for KNN would be something like
[command line]> module load intel
[command line]> module load intel_compiled_mpi_library
[command line]> module load mkl

--------------------------
performance issues.
* If you want to use multiple MPI ranks in a single node/socket, make
sure you set OMP_NUM_THREADS=1; otherwise the performance will not be
good. 

example for 10 nearest neighbors, 20,000 points, 200 points per leaf per rank
export OMP_NUM_THREADS=1
mpirun -np 1 ./ex1a2a.exe -rn 20000 -k 10 -mppn 200    # 1 rank,  20K points
mpirun -np 2 ./ex1a2a.exe -rn 20000 -k 10 -mppn 200    # 2 ranks, 40K points
mpirun -np 4 ./ex1a2a.exe -rn 20000 -k 10 -mppn 200    # 4 ranks, 80K points

